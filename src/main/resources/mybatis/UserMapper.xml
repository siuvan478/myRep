<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace必须指向Dao接口 -->
<mapper namespace="com.asgab.repository.UserMapper">

	<sql id="user_columns">
		login_name as loginName, name, password, salt, roles, email, phone, register_date as registerDate, update_date as updateDate, status
	</sql>
	<!--
		获取用户: 输出直接映射到对象, login_name列要"as loginName"以方便映射 ,team_id as "team.id"创建team对象并赋值
	-->
	<select id="get" parameterType="long" resultType="User">
		select id, <include refid="user_columns"/>
		from ss_user
		where status = 1 and id = #{id}
	</select>

	<!-- 查询用户,演示: 1.输入用map传入多个参数 2.<where>语句, 智能添加where和and关键字 3.输出直接映射对象 -->
	<select id="search" parameterType="map" resultType="User">
		select id, <include refid="user_columns"/>
		from ss_user where status = 1
		<if test="loginName != null">
			and login_name=#{loginName}
		</if>
		<if test="name != null">
			and name like "%"#{name}"%"
		</if>
		<if test="roles != null">
			and roles like "%"#{roles}"%"
		</if>
		<if test="sort != null and sort!=''">
			order by ${sort}
		</if>
	</select>
	
	<select id="count" parameterType="map" resultType="int">
		select count(1)
		from ss_user where status = 1
		<if test="loginName != null">
			and login_name=#{loginName}
		</if>
		<if test="name != null">
			and name like "%"#{name}"%"
		</if>
		<if test="roles != null">
			and roles like "%"#{roles}"%"
		</if>
	</select>

	<!-- 插入用户： 1.由数据库生成id并赋值到user对象 2.输入用对象, 嵌套属性表达式#{team.id} -->
	<insert id="save" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		insert into ss_user (login_name, name, password, salt, roles, email, phone, register_date, update_date)
		values (#{loginName}, #{name}, #{password}, #{salt}, #{roles}, #{email}, #{phone}, #{registerDate}, #{updateDate})
	</insert>
	
	<!-- 更新用户： 1.由数据库生成id并赋值到user对象 2.输入用对象, 嵌套属性表达式#{team.id} -->
	<update id="update" parameterType="User">
		update ss_user set 
		name = #{name},
		password = #{password},
		salt = #{salt},
		roles = #{roles},
		salt = #{salt},
		email = #{email},
		phone = #{phone},
		update_date = NOW(),
		status = #{status}
		where id = #{id}
	</update>
	
	<!-- 删除用户 -->
	<delete id="delete" parameterType="long">
	     update ss_user set status = 2 where id = #{id}
	</delete>
</mapper> 
